import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * Booking hierarchy.
 *  * @author Guiovanny Cardenas Rosales
 */
public class Coursework2Main {



    /**
     * @return a date sufficiently far in the future (seen from 2018/9) 
     */
    public static Date mkFutureDate() {
        Calendar cal = new GregorianCalendar(2020, 7, 4, 16, 0, 0);
        return cal.getTime();
    }

    /**
     * @return an exemplary RickshawBooking
     */
    public static RickshawBooking mkRickshawBooking() {
        return new RickshawBooking("Eric", mkFutureDate(), "Piccadilly Circus", "Malet Street");
    }
    /**
     * @return an exemplary HotelBooking
     */
    public static HotelBooking mkHotelBooking() {
        return new HotelBooking("Sarah", mkFutureDate(), "Birkbeck Hotel", 45000, 2, 3);
    }

    /**
     * @return an exemplary HotelBooking with negative number of single rooms
     */
    public static HotelBooking mkHotelBookingBad() {
        return new HotelBooking("Charlie", mkFutureDate(), "Some Hotel", 10000, -2, 3);
    }

    /**
     * @return an exemplary RestaurantBooking
     */
    public static RestaurantBooking mkRestaurantBooking() {
        return new RestaurantBooking("Ana", mkFutureDate(), "Birkbeck Restaurant", 8);
    }

    /**
     * @return an exemplary PrintBook
     */
    public static FixedPriceRestaurantBooking mkFixedPriceRestaurantBooking() {
        return new FixedPriceRestaurantBooking("Nikos", mkFutureDate(), "Malet Restaurant", 12, 3000);
    }

    /* Methods that exercise objects in the Booking hierarchy */
    /**
     *  some of the functionality of the class Booking.
     *
     * @param b a Booking, non-null 
     */
    public static void runBooking(Booking b) {
        HotelBooking hb1 = mkHotelBooking();
        System.out.println(hb1);
        System.out.println();

    }

    /**
     * Main method for classes from the Booking hierarchy.
     *
     * @param args ignored
     */
    public static void main(String[] args) {
        // exercise classes
        Booking[] bookings = {
                mkRickshawBooking(),
                mkHotelBooking(),
                mkRestaurantBooking(),
                mkFixedPriceRestaurantBooking()
            };
        for (Booking b : bookings) {
            System.out.println(b);
            System.out.println();
        }

        // exercise exceptions
        try {
            HotelBooking hb = mkHotelBookingBad();
            System.out.println(hb);
        } catch (IllegalArgumentException e) {
            System.out.println(e);
        }
        System.out.println();

        // exercise interface implementations
        HasFixedPrice[] fixedPrices = {
                mkFixedPriceRestaurantBooking(),
                mkHotelBooking()
            };
        System.out.println("*** Fixed Prices ***");
        for (HasFixedPrice fixed : fixedPrices) {
            System.out.println("Pence: " + fixed.getFixedPriceInPence());
        }
    }


}
